package org.junit.tests.experimental.rules;

import static org.junit.Assert.*;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestRule;
import org.junit.runner.Description;
import org.junit.runners.model.Statement;

/**
 * Tests whether Statements generated by rules can be reused
 * 
 * @author Asaf Ary
 */
public class StatementReuseTest {
	
	private static int count = 0;
	private static int errorCount = 0;

	@Rule public TestRule repeatRule = new TestRule() {
		// run every test exactly twice
		public Statement apply(final Statement base, Description description) {
			return new Statement() {
				@Override
				public void evaluate() throws Throwable {
					count = 0;
					errorCount = 0;
					for (int i=0; i < 2; i++) {
						try {
							base.evaluate();
						} catch (Throwable t) {
							errorCount++;
						}
					}
					assertEquals("I had one error", 1, errorCount);
				}
			};
		}
	};
	
	
	@Test
	public void testReuseTestNoTimoutValue() throws Exception {
		count++;
		if (count == 2) {
			throw new Exception("fail on second attempt");
		}
	}
	
	@Test(timeout = 1000)
	public void testReuseTestWithTimoutValue() throws Exception {
		count++;
		if (count == 2) {
			throw new Exception("fail on second attempt");
		}
	}
}
